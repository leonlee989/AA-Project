# Define 4 real workers using ajp13 & 1 balancer
worker.list=balancer
worker.balancer.type=lb
worker.balancer.balance_workers=worker1,worker2,worker3,worker4,worker5
worker.balancer.sticky_session=False

# R[equest] balancer will use the number of requests to find the best worker. Accesses will be distributed according to the lbfactor in a sliding time window. 
#T[raffic] - balancer will use the network traffic between JK and Tomcat to find the best worker. Accesses will be distributed according to the lbfactor in a sliding time window  
# B[usyness] - the balancer will pick the worker with the lowest current load, based on how many requests the worker is currently serving. This number is divided by the workers lbfactor, and the lowest value (least busy) worker is picked.
# S[ession] the balancer will use the number of sessions to find the best worker. Accesses will be distributed according to the lbfactor in a sliding time window. This method should be used, if sessions are your limiting resource, e.g. when you only have limited memory and your sessions need a lot of memory. Because the balancer does not keep any state, it actually does not know the number of sessions. Instead it counts each request without a session cookie or URL encoding as a new session. This method will neither know, when a session is being invalidated, nor will it correct its load numbers according to session timeouts or worker failover. If you know request URLs, that will be called without a session ID but should not be counted as new sessions, you should add them to the stateless mapping rule extension or set the Apache HTTPD environment variable JK_STATELESS for them.
# IN[ext] the balancer will again use the number of sessions to find the best worker. All remarks concerning the Sessionmethod apply as well. The difference to the Session method is how the session count is handled in the sliding time window. The Next method does not divide by 2, instead it subtracts the current minimum number. This should effectively result in a round-robin session balancing, thus the name Next. Under high load, the two session balancing methods will result in a similar distribution, but Next will be better if you need to distribute small numbers of sessions.
# so far busyness is proven to be a better choice for balancing
worker.balancer.method=B
# Specifies what lock method the load balancer will use for synchronising shared memory runtime data. If lock is set to O[ptimistic] balancer will not use shared memory lock to find the best worker. If set to P[essimistic] balancer will use shared memory lock. The balancer will work more accurately in case of Pessimistic locking, but can slow down the average response time. This feature has been added in jk 1.2.13.
worker.balancer.lock=O
# Set properties for worker1 (ajp13)
worker.worker1.type=ajp13
worker.worker1.host=localhost
worker.worker1.port=8009
worker.worker1.lbfactor=50
worker.worker1.cachesize=10
worker.worker1.cache_timeout=600
worker.worker1.socket_keepalive=1
worker.worker1.recycle_timeout=300

# Set properties for worker2 (ajp13)
worker.worker2.type=ajp13
worker.worker2.host=192.168.0.4
worker.worker2.port=8009
worker.worker2.lbfactor=50
worker.worker2.cachesize=10
worker.worker2.cache_timeout=600
worker.worker2.socket_keepalive=1
worker.worker2.recycle_timeout=300

# Set properties for worker3 (ajp13)
worker.worker3.type=ajp13
worker.worker3.host=192.168.0.3
worker.worker3.port=8009
worker.worker3.lbfactor=50
worker.worker3.cachesize=10
worker.worker3.cache_timeout=600
worker.worker3.socket_keepalive=1
worker.worker3.recycle_timeout=300

# Set properties for worker4 (ajp13)
worker.worker4.type=ajp13
worker.worker4.host=192.168.0.5
worker.worker4.port=8009
worker.worker4.lbfactor=50
worker.worker4.cachesize=10
worker.worker4.cache_timeout=600
worker.worker4.socket_keepalive=1
worker.worker4.recycle_timeout=300

# Set properties for worker5 (ajp13)
worker.worker5.type=ajp13
worker.worker5.host=192.168.0.6
worker.worker5.port=8009
worker.worker5.lbfactor=50
worker.worker5.cachesize=10
worker.worker5.cache_timeout=600
worker.worker5.socket_keepalive=1
worker.worker5.recycle_timeout=300